{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM+ZvgT/N/PWvh6texT2VHX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"SIdDUlXD8INy","executionInfo":{"status":"ok","timestamp":1744310209020,"user_tz":300,"elapsed":6252,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"ba71134a-6cf6-4eb9-98be-f93906a0b363"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-d8227071-a9c0-4a62-9e09-4b71aeb48a66\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-d8227071-a9c0-4a62-9e09-4b71aeb48a66\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving traffic_raw.csv to traffic_raw.csv\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6msHab8pKiOq"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report\n","from sklearn.preprocessing import LabelEncoder\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["df = pd.read_csv('traffic_raw.csv')\n","df['frame.time'] = pd.to_datetime(df['frame.time'])\n","df.set_index('frame.time', inplace=True)\n","# Resample to 1-second intervals, count packets per second\n","rate_df = df.resample('1S').size().rename(\"rate\").reset_index()\n","\n","# Label sequences based on rate threshold (e.g., >100 packets/sec = DDoS)\n","rate_df['label'] = rate_df['rate'].apply(lambda x: 'DDoS' if x > 30 else 'Normal')\n","\n","# Sliding window approach (more samples)\n","sequence_length = 30\n","step = 10  # overlap of 50 seconds\n","\n","X = []\n","y = []\n","\n","for start in range(0, len(rate_df) - sequence_length + 1, step):\n","    seq = rate_df['rate'].iloc[start:start+sequence_length].tolist()\n","    label_window = rate_df['label'].iloc[start:start+sequence_length]\n","    label = label_window.mode()[0]  # Majority vote label\n","    X.append(seq)\n","    y.append(label)\n","\n","# Convert to NumPy\n","X = np.array(X)\n","le = LabelEncoder()\n","y = le.fit_transform(y)\n","\n","\n","\n","# Train/test split\n","X_trainval, X_test, y_trainval, y_test = train_test_split(\n","    X, y, test_size=0.2, stratify=y, random_state=42\n",")\n","\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_trainval, y_trainval, test_size=0.2, stratify=y_trainval, random_state=42\n",")\n","\n","# Reshape for deep learning (CNN/RNN)\n","X_train_dl = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))\n","X_val_dl = X_val.reshape((X_val.shape[0], X_val.shape[1], 1))\n","X_test_dl = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))\n","\n","# Optional: check shapes\n","print(\"X_train shape:\", X_train.shape)\n","print(\"X_test shape:\", X_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RKlwqo9yb2yW","executionInfo":{"status":"ok","timestamp":1744311712635,"user_tz":300,"elapsed":104,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"0303f4c4-b626-4fc4-f848-704e81979adb"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape: (35, 30)\n","X_test shape: (11, 30)\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-48-0493239aac4c>:2: FutureWarning: Parsed string \"Apr  9, 2025 17:56:19.624388000 CDT\" included an un-recognized timezone \"CDT\". Dropping unrecognized timezones is deprecated; in a future version this will raise. Instead pass the string without the timezone, then use .tz_localize to convert to a recognized timezone.\n","  df['frame.time'] = pd.to_datetime(df['frame.time'])\n","<ipython-input-48-0493239aac4c>:5: FutureWarning: 'S' is deprecated and will be removed in a future version, please use 's' instead.\n","  rate_df = df.resample('1S').size().rename(\"rate\").reset_index()\n"]}]},{"cell_type":"code","source":["print(\"Start time:\", df.index.min())\n","print(\"End time:\", df.index.max())\n","print(\"Duration:\", df.index.max() - df.index.min())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CVCCF6nTA_Kb","executionInfo":{"status":"ok","timestamp":1744310733776,"user_tz":300,"elapsed":8,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"d63c29e7-a2f8-4368-db3f-4434ab8bac9b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Start time: 2025-04-09 17:56:19.624388\n","End time: 2025-04-09 18:05:56.513309\n","Duration: 0 days 00:09:36.888921\n"]}]},{"cell_type":"code","source":["print(\"Generated sequences:\", len(X))\n","from collections import Counter\n","print(\"Label distribution:\", Counter(y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pqbSzg12BTjN","executionInfo":{"status":"ok","timestamp":1744311016086,"user_tz":300,"elapsed":6,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"f41f073a-d54f-4601-9421-968071dbc308"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Generated sequences: 55\n","Label distribution: Counter({np.int64(0): 55})\n"]}]},{"cell_type":"code","source":["print(\"Rows in rate_df after resampling:\", len(rate_df))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P60Mk0N0Bn6E","executionInfo":{"status":"ok","timestamp":1744310798887,"user_tz":300,"elapsed":7,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"a7b29261-bcfb-4849-e23f-2b9b20aaf277"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Rows in rate_df after resampling: 578\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12, 4))\n","plt.plot(rate_df['frame.time'], rate_df['rate'], marker='.', linestyle='-')\n","plt.title(\"Packets Per Second Over Time\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Packet Rate\")\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"GokohgUWBs0B","executionInfo":{"status":"ok","timestamp":1744311637511,"user_tz":300,"elapsed":288,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"7debcfa7-2235-4080-a9ed-36fa92ab1bbf"},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from collections import Counter\n","print(\"Label counts:\", Counter(rate_df['label']))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YfZMpZCPB0ab","executionInfo":{"status":"ok","timestamp":1744311024328,"user_tz":300,"elapsed":5,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"7f8c1aae-5a27-448a-8c3a-ce1b1e51891a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Label counts: Counter({'Normal': 552, 'DDoS': 26})\n"]}]},{"cell_type":"code","source":["print(\"Total sequences generated:\", len(X))\n","print(\"Label balance in sequences:\", Counter(y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"37_fE-wBB-Aw","executionInfo":{"status":"ok","timestamp":1744311059843,"user_tz":300,"elapsed":39,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"51e3f3de-59de-4d15-cb13-e5562a339feb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total sequences generated: 55\n","Label balance in sequences: Counter({np.int64(0): 55})\n"]}]},{"cell_type":"code","source":["#Random Forest Classifier\n","clf = RandomForestClassifier(n_estimators=100, random_state=42)\n","clf.fit(X_train, y_train)\n","y_pred = clf.predict(X_test)\n","print(classification_report(y_test, y_pred))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GQIBz_9Ub9rA","executionInfo":{"status":"ok","timestamp":1744311097719,"user_tz":300,"elapsed":176,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"591c2d4a-de6d-4e3b-8920-56978639674b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        11\n","\n","    accuracy                           1.00        11\n","   macro avg       1.00      1.00      1.00        11\n","weighted avg       1.00      1.00      1.00        11\n","\n"]}]},{"cell_type":"code","source":["#Deep Learning (LTSM)(RNN)\n","import tensorflow as tf\n","from tensorflow.keras import layers, models\n","X_dl = X.reshape((X.shape[0], X.shape[1], 1))\n","X_train_dl, X_test_dl, y_train_dl, y_test_dl = train_test_split(X_dl, y, test_size=0.2, random_state=42)\n","model = models.Sequential([\n","    layers.LSTM(64, input_shape=(60, 1)),\n","    layers.Dense(32, activation='relu'),\n","    layers.Dense(1, activation='sigmoid')\n","])\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","history = model.fit(X_train_dl, y_train_dl, epochs=10, batch_size=32, validation_split=0.2)\n","loss, accuracy = model.evaluate(X_test_dl, y_test_dl)\n","print(f'Test Accuracy: {accuracy:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i3ffrt-_cFD5","executionInfo":{"status":"ok","timestamp":1744311783836,"user_tz":300,"elapsed":5430,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"e4aef2ff-4ae5-4bea-c69c-9f481c60eb78"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 473ms/step - accuracy: 1.0000 - loss: 0.6244 - val_accuracy: 1.0000 - val_loss: 0.5322\n","Epoch 2/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 109ms/step - accuracy: 1.0000 - loss: 0.5590 - val_accuracy: 1.0000 - val_loss: 0.4634\n","Epoch 3/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87ms/step - accuracy: 1.0000 - loss: 0.4975 - val_accuracy: 1.0000 - val_loss: 0.3948\n","Epoch 4/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 88ms/step - accuracy: 1.0000 - loss: 0.4339 - val_accuracy: 1.0000 - val_loss: 0.3267\n","Epoch 5/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 89ms/step - accuracy: 1.0000 - loss: 0.3753 - val_accuracy: 1.0000 - val_loss: 0.2610\n","Epoch 6/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 86ms/step - accuracy: 1.0000 - loss: 0.3005 - val_accuracy: 1.0000 - val_loss: 0.1953\n","Epoch 7/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87ms/step - accuracy: 1.0000 - loss: 0.2338 - val_accuracy: 1.0000 - val_loss: 0.1331\n","Epoch 8/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 85ms/step - accuracy: 1.0000 - loss: 0.1613 - val_accuracy: 1.0000 - val_loss: 0.0833\n","Epoch 9/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 109ms/step - accuracy: 1.0000 - loss: 0.0959 - val_accuracy: 1.0000 - val_loss: 0.0496\n","Epoch 10/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 91ms/step - accuracy: 1.0000 - loss: 0.0557 - val_accuracy: 1.0000 - val_loss: 0.0299\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 62ms/step - accuracy: 1.0000 - loss: 0.0343\n","Test Accuracy: 1.0000\n"]}]},{"cell_type":"code","source":["#Plot training Metrics\n","plt.plot(history.history['accuracy'], label='Train Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.title('RNN Accuracy')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"x1d_hUtZcR5u","executionInfo":{"status":"ok","timestamp":1744311785631,"user_tz":300,"elapsed":169,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"28c54380-a013-488c-a69f-b92de46dc978"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#CNN\n","X_cnn = X.reshape((X.shape[0], X.shape[1], 1))\n","X_train_cnn, X_test_cnn, y_train_cnn, y_test_cnn = train_test_split(X_cnn, y, test_size=0.2, random_state=42)\n","\n","cnn_model = models.Sequential([\n","    layers.Input(shape=(X_train.shape[1], 1)),  # dynamically uses your current shape\n","    layers.Conv1D(32, kernel_size=3, activation='relu'),\n","    layers.MaxPooling1D(pool_size=2),\n","    layers.Conv1D(64, kernel_size=3, activation='relu'),\n","    layers.Flatten(),\n","    layers.Dense(64, activation='relu'),\n","    layers.Dense(1, activation='sigmoid')\n","])\n","\n","cnn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","history_cnn = cnn_model.fit(X_train_cnn, y_train_cnn, epochs=10, validation_split=0.2)\n","\n","plt.plot(history_cnn.history['accuracy'], label='Train')\n","plt.plot(history_cnn.history['val_accuracy'], label='Val')\n","plt.title(\"CNN Accuracy\")\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":799},"id":"v51TR2AEcYpl","executionInfo":{"status":"ok","timestamp":1744311364426,"user_tz":300,"elapsed":8190,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"a6b6454a-ec07-405e-ef84-33b78eed281a"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 582ms/step - accuracy: 0.1455 - loss: 2.2923 - val_accuracy: 0.7778 - val_loss: 0.3936\n","Epoch 2/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 443ms/step - accuracy: 0.9411 - loss: 0.2038 - val_accuracy: 1.0000 - val_loss: 0.0886\n","Epoch 3/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 80ms/step - accuracy: 1.0000 - loss: 0.0770 - val_accuracy: 1.0000 - val_loss: 0.0320\n","Epoch 4/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 79ms/step - accuracy: 1.0000 - loss: 0.0421 - val_accuracy: 1.0000 - val_loss: 0.0154\n","Epoch 5/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 81ms/step - accuracy: 1.0000 - loss: 0.0308 - val_accuracy: 1.0000 - val_loss: 0.0086\n","Epoch 6/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 91ms/step - accuracy: 1.0000 - loss: 0.0200 - val_accuracy: 1.0000 - val_loss: 0.0053\n","Epoch 7/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 86ms/step - accuracy: 1.0000 - loss: 0.0182 - val_accuracy: 1.0000 - val_loss: 0.0035\n","Epoch 8/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 84ms/step - accuracy: 1.0000 - loss: 0.0146 - val_accuracy: 1.0000 - val_loss: 0.0024\n","Epoch 9/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 90ms/step - accuracy: 1.0000 - loss: 0.0121 - val_accuracy: 1.0000 - val_loss: 0.0017\n","Epoch 10/10\n","\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 86ms/step - accuracy: 1.0000 - loss: 0.0103 - val_accuracy: 1.0000 - val_loss: 0.0013\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Autoencoder\n","# Train on normal data only\n","normal_indices = [i for i, label in enumerate(y) if label == 0]\n","X_normal = X[normal_indices].reshape((-1, 60, 1))\n","X_train_auto, X_test_auto = train_test_split(X_normal, test_size=0.2, random_state=42)\n","\n","autoencoder = models.Sequential([\n","    layers.Conv1D(32, 3, activation='relu', padding='same', input_shape=(60, 1)),\n","    layers.MaxPooling1D(2, padding='same'),\n","    layers.Conv1D(16, 3, activation='relu', padding='same'),\n","    layers.MaxPooling1D(2, padding='same'),\n","    layers.Conv1D(16, 3, activation='relu', padding='same'),\n","    layers.UpSampling1D(2),\n","    layers.Conv1D(32, 3, activation='relu', padding='same'),\n","    layers.UpSampling1D(2),\n","    layers.Conv1D(1, 3, activation='sigmoid', padding='same')\n","])\n","autoencoder.compile(optimizer='adam', loss='mse')\n","history_auto = autoencoder.fit(X_train_auto, X_train_auto, epochs=10, validation_split=0.2)\n","\n","# Plot training loss\n","plt.plot(history_auto.history['loss'], label='Train Loss')\n","plt.plot(history_auto.history['val_loss'], label='Val Loss')\n","plt.title(\"Autoencoder Loss\")\n","plt.legend()\n","plt.show()\n","\n","# Reconstruction threshold\n","reconstructions = autoencoder.predict(X_test_auto)\n","recon_error = np.mean((X_test_auto - reconstructions)**2, axis=(1, 2))\n","threshold = np.mean(recon_error) + 3*np.std(recon_error)\n","print(f\"Anomaly detection threshold: {threshold:.5f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"uzHr6yYcdsZ8","executionInfo":{"status":"error","timestamp":1744311134458,"user_tz":300,"elapsed":35,"user":{"displayName":"Ayomide Adu","userId":"06406959203032992157"}},"outputId":"243a9841-2769-4971-f40d-4ed0f74a9197"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"cannot reshape array of size 1650 into shape (60,1)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-d71dcb40b8db>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Train on normal data only\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mnormal_indices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mX_normal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnormal_indices\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m60\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mX_train_auto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test_auto\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_normal\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: cannot reshape array of size 1650 into shape (60,1)"]}]}]}